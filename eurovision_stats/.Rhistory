scale_fill_manual(values = magma()) +
geom_text(data = data, aes(x, y, size=Freq, label = Var1)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
# drop rows where freq is 1
lang_count = lang_count[lang_count$Freq > 5,]
packing <- circleProgressiveLayout(lang_count$Freq, sizetype='area')
data <- cbind(lang_count, packing)
data
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(x, y, size=Freq, label = Var1)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
ggplotly(p)
lang_count = data.frame(language = freq_table$Var1, freq = freq_table$Freq)
freq_table = table(unlist(strsplit(country_lang$lang, ",")))
lang_count = data.frame(language = freq_table$Var1, freq = freq_table$Freq)
lang_count = data.frame(language = freq_table['Var1', freq = freq_table$Freq)
freq_table
lang_count = data.frame(freq_table)
lang_count
# rename the columns
colnames(lang_count) = c("Language", "Count")
lang_count
# drop rows where freq is 1
lang_count = lang_count[lang_count$Count > 10,]
packing <- circleProgressiveLayout(lang_count$Count, sizetype='area')
data <- cbind(lang_count, packing)
data
dat.gg <- circleLayoutVertices(packing, npoints=50)
source("~/.active-rstudio-document")
p <- ggplot() +
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(x, y, size=Count, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
ggplotly(p, tooltip = c("Language", "Count")
p <- ggplot() +
p
ggplotly(p, tooltip = c("Language", "Count")
ggplotly(p, tooltip = c("Language", "Count")
ggplotly(p, tooltip = c("Language", "Count")
ggplotly(p, tooltip = c("Language", "Count")
ggplotly(p, tooltip = c("Language", "Count")
ggplotly(p, tooltip = c("Language", "Count")
ggplotly(p, tooltip = c("Language", "Count")
ggplotly(p, tooltip = c("Language", "Count")
ggplotly(p, tooltip = c("Language", "Count"))
prop_table = prop.table(freq_table))
prop_table = prop.table(freq_table)
prop_table
# data frame
lang_count = data.frame(prop_table)
colnames(lang_count) = c("Language", "Proportion")
lang_count
# change the values in column proportion to  percentage
lang_count$Proportion = lang_count$Proportion * 100
lang_count
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
results = read.csv("eurovision_results.csv")
country_lang = data.frame(country = results$Country, lang = results$Language)
country_lang$lang = gsub(" ", "", country_lang$lang)
freq_table = table(unlist(strsplit(country_lang$lang, ",")))
prop_table = prop.table(freq_table)
# data frame
lang_count = data.frame(prop_table)
colnames(lang_count) = c("Language", "Proportion")
# change the values in column proportion to  percentage
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
packing <- circleProgressiveLayout(lang_count$Proportion, sizetype='area')
data <- cbind(lang_count, packing)
data
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
ggplotly(p, tooltip = c("Language", "Count"))
ggplotly(p, tooltip = c("Language", "Proportion"))
sort(lang_count$Proportion, decreasing = TRUE)
# drop rows where freq is 1
lang_count = lang_count[lang_count$Proportion > 1.00,]
sort(lang_count$Proportion, decreasing = TRUE)
packing <- circleProgressiveLayout(lang_count$Proportion, sizetype='area')
data <- cbind(lang_count, packing)
data
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
ggplotly(p, tooltip = c("Language", "Proportion"))
p <- ggplot() +
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
ggplotly(p, tooltip = c("Language", "Proportion"))
# drop rows where freq is 1
lang_count = lang_count[lang_count$Proportion > 3.00,]
packing <- circleProgressiveLayout(lang_count$Proportion, sizetype='area')
data <- cbind(lang_count, packing)
data
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
ggplotly(p, tooltip = c("Language", "Proportion"))
ggplotly(p, tooltip = c("Language", "Proportion"))
p
# drop rows where freq is 1
lang_count = lang_count[lang_count$Proportion > 2.50,]
results = read.csv("eurovision_results.csv")
country_lang = data.frame(country = results$Country, lang = results$Language)
country_lang$lang = gsub(" ", "", country_lang$lang)
freq_table = table(unlist(strsplit(country_lang$lang, ",")))
prop_table = prop.table(freq_table)
lang_count = data.frame(prop_table)
colnames(lang_count) = c("Language", "Proportion")
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
# drop rows where freq is 1
lang_count = lang_count[lang_count$Proportion > 2.50,]
packing <- circleProgressiveLayout(lang_count$Proportion, sizetype='area')
data <- cbind(lang_count, packing)
data
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
results = read.csv("eurovision_results.csv")
country_lang = data.frame(country = results$Country, lang = results$Language)
country_lang$lang = gsub(" ", "", country_lang$lang)
freq_table = table(unlist(strsplit(country_lang$lang, ",")))
prop_table = prop.table(freq_table)
lang_count = data.frame(prop_table)
colnames(lang_count) = c("Language", "Proportion")
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
# drop rows where freq is 1
lang_count = lang_count[lang_count$Proportion > 2.00,]
packing <- circleProgressiveLayout(lang_count$Proportion, sizetype='area')
data <- cbind(lang_count, packing)
data
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
results = read.csv("eurovision_results.csv")
country_lang = data.frame(country = results$Country, lang = results$Language)
country_lang$lang = gsub(" ", "", country_lang$lang)
freq_table = table(unlist(strsplit(country_lang$lang, ",")))
prop_table = prop.table(freq_table)
lang_count = data.frame(prop_table)
colnames(lang_count) = c("Language", "Proportion")
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
# drop rows where freq is 1
lang_count = lang_count[lang_count$Proportion > 1.00,]
packing <- circleProgressiveLayout(lang_count$Proportion, sizetype='area')
data <- cbind(lang_count, packing)
data
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
ggsave("circles_lang.png", p, width = 10, height = 10)
widg <- ggiraph(ggobj = p, width_svg = 7, height_svg = 7)
install.packages("ggiraph")
library(ggiraph)
widg <- ggiraph(ggobj = p, width_svg = 7, height_svg = 7)
widg
widg
results = read.csv("eurovision_results.csv")
country_lang = data.frame(country = results$Country, lang = results$Language)
country_lang$lang = gsub(" ", "", country_lang$lang)
freq_table = table(unlist(strsplit(country_lang$lang, ",")))
prop_table = prop.table(freq_table)
lang_count = data.frame(prop_table)
colnames(lang_count) = c("Language", "Proportion")
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
# drop rows where freq is 1
lang_count = lang_count[lang_count$Proportion > 1.00,]
packing <- circleProgressiveLayout(lang_count$Proportion, sizetype='area')
data <- cbind(lang_count, packing)
data
data$text <- paste("Language: ",data$Language, "\n", "proportion:", data$Proportion, "\n")
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = ), colour = "black", alpha = 0.6) +
scale_fill_manual(values = magma(nrow(data))) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- ggiraph(ggobj = p, width_svg = 7, height_svg = 7)
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = ), colour = "black", alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- ggiraph(ggobj = p, width_svg = 7, height_svg = 7)
widg
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), colour = "black", alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- ggiraph(ggobj = p, width_svg = 7, height_svg = 7)
widg
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
data$text <- paste("Language: ",data$Language, "\n", "Proportion: ", data$Proportion, "\n", "Proportion of ", data$Language, " eurovision songs is ", data$Proportion)
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size= 10 * Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size= 100 * Proportion, label = Language)) +
scale_size_continuous(range = c(1,4)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(5,10)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(3,7)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
lang_freq = data.frame(freq_table))
lang_freq = data.frame(freq_table)
lang_count$Count = lang_freq$Freq
results = read.csv("eurovision_results.csv")
country_lang = data.frame(country = results$Country, lang = results$Language)
country_lang$lang = gsub(" ", "", country_lang$lang)
freq_table = table(unlist(strsplit(country_lang$lang, ",")))
prop_table = prop.table(freq_table)
lang_freq = data.frame(freq_table)
lang_count = data.frame(prop_table)
lang_count$Count = lang_freq$Freq
colnames(lang_count) = c("Language", "Proportion")
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
colnames(lang_count) = c("Language", "Proportion", "Count")
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
results = read.csv("eurovision_results.csv")
country_lang = data.frame(country = results$Country, lang = results$Language)
country_lang$lang = gsub(" ", "", country_lang$lang)
freq_table = table(unlist(strsplit(country_lang$lang, ",")))
prop_table = prop.table(freq_table)
lang_freq = data.frame(freq_table)
lang_count = data.frame(prop_table)
lang_count$Count = lang_freq$Freq
colnames(lang_count) = c("Language", "Proportion", "Count")
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
data$text <- paste("Language: ",data$Language, "\n", "Proportion: ", data$Proportion, "\n",
"Proportion of ", data$Language,
" eurovision songs is ", data$Proportion,
", that is ", data$Count, " songs.")
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(3,7)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
data <- cbind(lang_count, packing)
data
data$text <- paste("Language: ",data$Language, "\n", "Proportion: ", data$Proportion, "\n",
"Proportion of ", data$Language,
" eurovision songs is ", data$Proportion,
", that is ", data$Count, " songs.")
dat.gg <- circleLayoutVertices(packing, npoints=50)
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(3,7)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
results = read.csv("eurovision_results.csv")
country_lang = data.frame(country = results$Country, lang = results$Language)
country_lang$lang = gsub(" ", "", country_lang$lang)
freq_table = table(unlist(strsplit(country_lang$lang, ",")))
prop_table = prop.table(freq_table)
lang_freq = data.frame(freq_table)
lang_count = data.frame(prop_table)
lang_count$Count = lang_freq$Freq
colnames(lang_count) = c("Language", "Proportion", "Count")
# change the values in column proportion to  percentage
lang_count$Proportion = round(lang_count$Proportion * 100, 2)
lang_count
# drop rows where freq is 1
lang_count = lang_count[lang_count$Proportion > 1.00,]
packing <- circleProgressiveLayout(lang_count$Proportion, sizetype='area')
data <- cbind(lang_count, packing)
data
data$text <- paste("Language: ",data$Language, "\n", "Proportion: ", data$Proportion, "\n",
"Proportion of ", data$Language,
" eurovision songs is ", data$Proportion,
", that is ", data$Count, " songs.")
data$text <- paste("Language: ",data$Language, "\n", "Proportion: ", data$Proportion, "\n",
"Proportion of ", data$Language,
" eurovision songs is ", data$Proportion,
", that is ", data$Count, " songs.")
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_size_continuous(range = c(3,7)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_fill_distiller(palette = "BuPu", direction = 1 ) +
scale_size_continuous(range = c(3,7)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_fill_distiller(palette = "BuPu", direction = -1 ) +
scale_size_continuous(range = c(3,7)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language)) +
scale_fill_distiller(palette = "RdPu", direction = -1 ) +
scale_size_continuous(range = c(3,7)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
widg
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language, color = "white")) +
scale_fill_distiller(palette = "RdPu", direction = -1 ) +
scale_size_continuous(range = c(3,7)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
p <- ggplot() +
geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, tooltip = data$text[id]), alpha = 0.6) +
geom_text(data = data, aes(x, y, size=Proportion, label = Language), color = "white") +
scale_fill_distiller(palette = "RdPu", direction = -1 ) +
scale_size_continuous(range = c(3,7)) +
theme_void() +
theme(legend.position="none") +
coord_equal()
p
widg <- girafe(ggobj = p, width_svg = 7, height_svg = 7)
widg
source("~/.active-rstudio-document")
shiny::runApp('C:/Users/julci/SEM 4/data vizualization/lab4')
runApp('C:/Users/julci/SEM 4/data vizualization/lab4')
library(shiny)
ui <- fluidPage()
runApp('~/eurovision_stats')
shiny::runApp()
install.packages("shinyWidgets")
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shinyWidgets)
library(shiny)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/julci/Data_viz_HW4/eurovision_stats")
shiny::runApp()
